module Kodfodrasz.AoC.Year2024.Tests.Day20Tests

open Xunit
open Swensen.Unquote.Assertions

open Kodfodrasz.AoC
open Kodfodrasz.AoC.Year2024
open Kodfodrasz.AoC.Year2024.Day20


let exampleInput = """
###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
"""

[<Fact>]
let ``Parsing example input`` () =
  let expected: parsedInput = [|
        [| '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; |];
        [| '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '.'; '.'; '#'; |];
        [| '#'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '#'; '#'; '.'; '#'; |];
        [| '#'; 'S'; '#'; '.'; '.'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '.'; '.'; '#'; |];
        [| '#'; '#'; '#'; '#'; '#'; '#'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '#'; '#'; |];
        [| '#'; '#'; '#'; '#'; '#'; '#'; '#'; '.'; '#'; '.'; '#'; '.'; '.'; '.'; '#'; |];
        [| '#'; '#'; '#'; '#'; '#'; '#'; '#'; '.'; '#'; '.'; '#'; '#'; '#'; '.'; '#'; |];
        [| '#'; '#'; '#'; '.'; '.'; 'E'; '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '#'; |];
        [| '#'; '#'; '#'; '.'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '.'; '#'; '#'; '#'; |];
        [| '#'; '.'; '.'; '.'; '#'; '#'; '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '#'; |];
        [| '#'; '.'; '#'; '#'; '#'; '#'; '#'; '.'; '#'; '.'; '#'; '#'; '#'; '.'; '#'; |];
        [| '#'; '.'; '#'; '.'; '.'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '.'; '.'; '#'; |];
        [| '#'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '.'; '#'; '#'; '#'; |];
        [| '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '#'; '.'; '.'; '.'; '#'; '#'; '#'; |];
        [| '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; '#'; |];
  |]

  test
    <@ let actual = parseInput exampleInput
       actual = Ok expected @>

[<Fact>]
let ``Answer 1 for example input`` () =
  let input = 
    parseInput exampleInput 
    // TODO: Result.get
    |> Result.defaultWith (fun _ -> failwith "shouldn't happen")

  test
    <@ answer1_params 2 input = Ok 44 @>
  test
    <@ answer1_params 20 input = Ok 5 @>

[<Fact>]
let ``Answer 2 for example input`` () =
  let input = 
    parseInput exampleInput |> Result.get

  test
    <@ answer2_params 20 50 input = Ok 285 @>
  test
    <@ answer2_params 20 76 input = Ok 3 @>
